import io.LogLevel;
import io.Logger;
import io.SudokuReader;
import io.arffWriter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import model.Classification;
import model.FeatureVector;
import model.Sudoku;
import solver.SudokuStepFinder;
import sudoku.*;

public class Main {
	public static void main(String args[]) throws Exception {
		Logger.addLogLevel(LogLevel.GeneralInformation);
		// Logger.addLogLevel(LogLevel.SolvingMethods);

		arffWriter aw = new arffWriter("featureVectors.arff");

		// lists with the computed feature vectors
		ArrayList<FeatureVector> hodokuEasyVectors = new ArrayList<FeatureVector>();
		ArrayList<FeatureVector> hodokuMiddleVectors = new ArrayList<FeatureVector>();
		ArrayList<FeatureVector> hodokuHardVectors = new ArrayList<FeatureVector>();
		ArrayList<FeatureVector> hodokuUnfairVectors = new ArrayList<FeatureVector>();
		ArrayList<FeatureVector> hodokuExtremeVectors = new ArrayList<FeatureVector>();
		
		ArrayList<FeatureVector> soEinDingSehrEinfach = new ArrayList<FeatureVector>();
		ArrayList<FeatureVector> soEinDingEinfach = new ArrayList<FeatureVector>();
		ArrayList<FeatureVector> soEinDingStandard = new ArrayList<FeatureVector>();
		ArrayList<FeatureVector> soEinDingModerat = new ArrayList<FeatureVector>();
		ArrayList<FeatureVector> soEinDingAnspruchsvoll = new ArrayList<FeatureVector>();
		ArrayList<FeatureVector> soEinDingSehrAnspruchsvoll = new ArrayList<FeatureVector>();
		ArrayList<FeatureVector> soEinDingTeuflisch = new ArrayList<FeatureVector>();

		HashMap<Classification, ArrayList<FeatureVector>> classificatedVectors = new HashMap<Classification, ArrayList<FeatureVector>>();

		SudokuReader sr = null;

//		sr = new SudokuReader("sudokus.txt");
//		Sudoku2 sudoku = sr.read().get(0);
//		SudokuStepFinder sf = new SudokuStepFinder();
//		List<SolutionStep> steps = sf.getAllWings(sudoku);
//		System.out.println(steps.get(0).getStepName());

		// easy
		sr = new SudokuReader("hodoku-easy.txt");
		ArrayList<Sudoku2> sudokusHodokuEasy = sr.read();
		Logger.log(LogLevel.GeneralInformation, "classification: hodoku easy");
		Logger.log(LogLevel.GeneralInformation, sudokusHodokuEasy.size()
				+ " sudokus loaded.");
		hodokuEasyVectors = getFeatureVectors(sudokusHodokuEasy);

		// middle
		sr = new SudokuReader("hodoku-middle.txt");
		ArrayList<Sudoku2> sudokusHodokuMiddle = sr.read();
		Logger.log(LogLevel.GeneralInformation, "classification: hodoku middle");
		Logger.log(LogLevel.GeneralInformation, sudokusHodokuMiddle.size()
				+ " sudokus loaded.");
		hodokuMiddleVectors = getFeatureVectors(sudokusHodokuMiddle);

		// hard
		sr = new SudokuReader("hodoku-hard.txt");
		ArrayList<Sudoku2> sudokusHodokuHard = sr.read();
		Logger.log(LogLevel.GeneralInformation, "classification: hodoku hard");
		Logger.log(LogLevel.GeneralInformation, sudokusHodokuHard.size()
				+ " sudokus loaded.");
		hodokuHardVectors = getFeatureVectors(sudokusHodokuHard);

		// unfair
		sr = new SudokuReader("hodoku-unfair.txt");
		ArrayList<Sudoku2> sudokusHodokuUnfair = sr.read();
		Logger.log(LogLevel.GeneralInformation, "classification: hodoku unfair");
		Logger.log(LogLevel.GeneralInformation, sudokusHodokuUnfair.size()
				+ " sudokus loaded.");
		hodokuUnfairVectors = getFeatureVectors(sudokusHodokuUnfair);

		// extreme
		sr = new SudokuReader("hodoku-extreme.txt");
		ArrayList<Sudoku2> sudokusHodokuExtreme = sr.read();
		Logger.log(LogLevel.GeneralInformation,
				"classification: hodoku extreme");
		Logger.log(LogLevel.GeneralInformation, sudokusHodokuExtreme.size()
				+ " sudokus loaded.");
		hodokuExtremeVectors = getFeatureVectors(sudokusHodokuExtreme);
		
		// read sudokus generated by soEinDing (classification sehr einfach)
				 // from textfile
		// sr = new SudokuReader("sehrEinfach.txt");
		// ArrayList<Sudoku2> sudokusSoEinDingSehrEinfach =
		// sr.readFromSoEinDing();
		//
		// Logger.log(LogLevel.GeneralInformation,
		// "classification: soEinDing Sehr Einfach");
		// Logger.log(LogLevel.GeneralInformation,
		// sudokusSoEinDingSehrEinfach.size() + " sudokus loaded.");
		//
		// soEinDingSehrEinfach =
		// getFeatureVectors(sudokusSoEinDingSehrEinfach);
		//
		// // read sudokus generated by soEinDing (classification einfach) from
		// // textfile
		// sr = new SudokuReader("einfach.txt");
		// ArrayList<Sudoku2> sudokusSoEinDingEinfach = sr.readFromSoEinDing();
		//
		// Logger.log(LogLevel.GeneralInformation,
		// "classification: soEinDing Einfach");
		// Logger.log(LogLevel.GeneralInformation,
		// sudokusSoEinDingEinfach.size()
		// + " sudokus loaded.");
		//
		// soEinDingEinfach = getFeatureVectors(sudokusSoEinDingEinfach);
		//
		// // read sudokus generated by soEinDing (classification standard) from
		// // textfile
		// sr = new SudokuReader("standard.txt");
		// ArrayList<Sudoku2> sudokusSoEinDingStandard = sr.readFromSoEinDing();
		//
		// Logger.log(LogLevel.GeneralInformation,
		// "classification: soEinDing Standard");
		// Logger.log(LogLevel.GeneralInformation,
		// sudokusSoEinDingStandard.size()
		// + " sudokus loaded.");
		//
		// soEinDingStandard = getFeatureVectors(sudokusSoEinDingStandard);
		//
		// // read sudokus generated by soEinDing (classification moderat) from
		// // textfile
		// sr = new SudokuReader("moderat.txt");
		// ArrayList<Sudoku2> sudokusSoEinDingModerat = sr.readFromSoEinDing();
		//
		// Logger.log(LogLevel.GeneralInformation,
		// "classification: soEinDing Moderat");
		// Logger.log(LogLevel.GeneralInformation,
		// sudokusSoEinDingModerat.size()
		// + " sudokus loaded.");
		//
		// soEinDingModerat = getFeatureVectors(sudokusSoEinDingModerat);
		//
		// // read sudokus generated by soEinDing (classification anspruchsvoll)
		// // from textfile
		// sr = new SudokuReader("anspruchsvoll.txt");
		// ArrayList<Sudoku2> sudokusSoEinDingAnspruchsvoll = sr
		// .readFromSoEinDing();
		//
		// Logger.log(LogLevel.GeneralInformation,
		// "classification: soEinDing Anspruchsvoll");
		// Logger.log(LogLevel.GeneralInformation,
		// sudokusSoEinDingAnspruchsvoll.size() + " sudokus loaded.");
		//
		// soEinDingAnspruchsvoll =
		// getFeatureVectors(sudokusSoEinDingAnspruchsvoll);
		//
		// // read sudokus generated by soEinDing (classification sehr
		// // anspruchsvoll) from textfile
		// sr = new SudokuReader("sehrAnspruchsvoll.txt");
		// ArrayList<Sudoku2> sudokusSoEinDingSehrAnspruchsvoll = sr
		// .readFromSoEinDing();
		//
		// Logger.log(LogLevel.GeneralInformation,
		// "classification: soEinDing Sehr Anspruchsvoll");
		// Logger.log(LogLevel.GeneralInformation,
		// sudokusSoEinDingSehrAnspruchsvoll.size() + " sudokus loaded.");
		//
		// soEinDingSehrAnspruchsvoll =
		// getFeatureVectors(sudokusSoEinDingSehrAnspruchsvoll);
		//
		// // read sudokus generated by soEinDing (classification teuflisch)
		// // from
		// // textfile
		// sr = new SudokuReader("teuflisch.txt");
		// ArrayList<Sudoku2> sudokusSoEinDingTeuflisch =
		// sr.readFromSoEinDing();
		//
		// Logger.log(LogLevel.GeneralInformation,
		// "classification: soEinDing Teuflisch");
		// Logger.log(LogLevel.GeneralInformation,
		// sudokusSoEinDingTeuflisch.size() + " sudokus loaded.");
		//
		// soEinDingTeuflisch = getFeatureVectors(sudokusSoEinDingTeuflisch);

		// write all Feature Vectors to an arff file
		classificatedVectors.put(Classification.HodokuEasy, hodokuEasyVectors);
		classificatedVectors.put(Classification.HodokuMiddle,
				hodokuMiddleVectors);
		classificatedVectors.put(Classification.HodokuHard, hodokuHardVectors);
		classificatedVectors.put(Classification.HodokuUnfair,
				hodokuUnfairVectors);
		classificatedVectors.put(Classification.HodokuExtreme,
				hodokuExtremeVectors);
		
//		classificatedVectors.put(Classification. soEinDingSehrEinfach,
//				   soEinDingSehrEinfach); classificatedVectors
//				   .put(Classification.soEinDingEinfach, soEinDingEinfach);
//				   classificatedVectors.put (Classification.soEinDingStandard,
//				   soEinDingStandard); classificatedVectors.put
//				   (Classification.soEinDingModerat, soEinDingModerat);
//				   classificatedVectors.put (Classification.soEinDingAnspruchsvoll,
//				   soEinDingAnspruchsvoll); classificatedVectors.put(Classification.
//				   soEinDingSehrAnspruchsvoll, soEinDingSehrAnspruchsvoll);
//				   classificatedVectors .put(Classification.soEinDingTeuflisch,
//				   soEinDingTeuflisch);

		aw.writeToFile(classificatedVectors);

		Logger.exit();
	}

	public static ArrayList<FeatureVector> getFeatureVectors(
			ArrayList<Sudoku2> sudokus) {
		ArrayList<FeatureVector> fvs = new ArrayList<FeatureVector>();

		int solvedCount = 0;
		int notSolvedCount = 0;

		for (int i = 0; i < sudokus.size(); i++) {
			FeatureVectorExtractor fvex = new FeatureVectorExtractor(
					sudokus.get(i));
			fvs.add(fvex.getFeatureVector());
			if (fvex.isSolved())
				solvedCount++;
			else
				notSolvedCount++;
		}

		Logger.log(LogLevel.GeneralInformation, "Solved " + solvedCount
				+ " sudokus");
		Logger.log(LogLevel.GeneralInformation, "Couldn´t solve "
				+ notSolvedCount + " sudokus\n");

		return fvs;
	}
}